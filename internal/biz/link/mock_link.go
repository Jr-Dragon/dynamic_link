// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package link

import (
	"context"
	"sync"
)

// Ensure, that ContractMock does implement Contract.
// If this is not the case, regenerate this file with moq.
var _ Contract = &ContractMock{}

// ContractMock is a mock implementation of Contract.
//
//	func TestSomethingThatUsesContract(t *testing.T) {
//
//		// make and configure a mocked Contract
//		mockedContract := &ContractMock{
//			CreateFunc: func(ctx context.Context, req CreateRequest) (CreateResponse, error) {
//				panic("mock out the Create method")
//			},
//			RedirectApplinkFunc: func(ctx context.Context, uas string, code string) (string, error) {
//				panic("mock out the RedirectApplink method")
//			},
//			RedirectSimpleFunc: func(ctx context.Context, code string) (string, error) {
//				panic("mock out the RedirectSimple method")
//			},
//			ValidateSimpleFunc: func(code []byte) error {
//				panic("mock out the ValidateSimple method")
//			},
//		}
//
//		// use mockedContract in code that requires Contract
//		// and then make assertions.
//
//	}
type ContractMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, req CreateRequest) (CreateResponse, error)

	// RedirectApplinkFunc mocks the RedirectApplink method.
	RedirectApplinkFunc func(ctx context.Context, uas string, code string) (string, error)

	// RedirectSimpleFunc mocks the RedirectSimple method.
	RedirectSimpleFunc func(ctx context.Context, code string) (string, error)

	// ValidateSimpleFunc mocks the ValidateSimple method.
	ValidateSimpleFunc func(code []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req CreateRequest
		}
		// RedirectApplink holds details about calls to the RedirectApplink method.
		RedirectApplink []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Uas is the uas argument value.
			Uas string
			// Code is the code argument value.
			Code string
		}
		// RedirectSimple holds details about calls to the RedirectSimple method.
		RedirectSimple []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Code is the code argument value.
			Code string
		}
		// ValidateSimple holds details about calls to the ValidateSimple method.
		ValidateSimple []struct {
			// Code is the code argument value.
			Code []byte
		}
	}
	lockCreate          sync.RWMutex
	lockRedirectApplink sync.RWMutex
	lockRedirectSimple  sync.RWMutex
	lockValidateSimple  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ContractMock) Create(ctx context.Context, req CreateRequest) (CreateResponse, error) {
	if mock.CreateFunc == nil {
		panic("ContractMock.CreateFunc: method is nil but Contract.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req CreateRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, req)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedContract.CreateCalls())
func (mock *ContractMock) CreateCalls() []struct {
	Ctx context.Context
	Req CreateRequest
} {
	var calls []struct {
		Ctx context.Context
		Req CreateRequest
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// RedirectApplink calls RedirectApplinkFunc.
func (mock *ContractMock) RedirectApplink(ctx context.Context, uas string, code string) (string, error) {
	if mock.RedirectApplinkFunc == nil {
		panic("ContractMock.RedirectApplinkFunc: method is nil but Contract.RedirectApplink was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Uas  string
		Code string
	}{
		Ctx:  ctx,
		Uas:  uas,
		Code: code,
	}
	mock.lockRedirectApplink.Lock()
	mock.calls.RedirectApplink = append(mock.calls.RedirectApplink, callInfo)
	mock.lockRedirectApplink.Unlock()
	return mock.RedirectApplinkFunc(ctx, uas, code)
}

// RedirectApplinkCalls gets all the calls that were made to RedirectApplink.
// Check the length with:
//
//	len(mockedContract.RedirectApplinkCalls())
func (mock *ContractMock) RedirectApplinkCalls() []struct {
	Ctx  context.Context
	Uas  string
	Code string
} {
	var calls []struct {
		Ctx  context.Context
		Uas  string
		Code string
	}
	mock.lockRedirectApplink.RLock()
	calls = mock.calls.RedirectApplink
	mock.lockRedirectApplink.RUnlock()
	return calls
}

// RedirectSimple calls RedirectSimpleFunc.
func (mock *ContractMock) RedirectSimple(ctx context.Context, code string) (string, error) {
	if mock.RedirectSimpleFunc == nil {
		panic("ContractMock.RedirectSimpleFunc: method is nil but Contract.RedirectSimple was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Code string
	}{
		Ctx:  ctx,
		Code: code,
	}
	mock.lockRedirectSimple.Lock()
	mock.calls.RedirectSimple = append(mock.calls.RedirectSimple, callInfo)
	mock.lockRedirectSimple.Unlock()
	return mock.RedirectSimpleFunc(ctx, code)
}

// RedirectSimpleCalls gets all the calls that were made to RedirectSimple.
// Check the length with:
//
//	len(mockedContract.RedirectSimpleCalls())
func (mock *ContractMock) RedirectSimpleCalls() []struct {
	Ctx  context.Context
	Code string
} {
	var calls []struct {
		Ctx  context.Context
		Code string
	}
	mock.lockRedirectSimple.RLock()
	calls = mock.calls.RedirectSimple
	mock.lockRedirectSimple.RUnlock()
	return calls
}

// ValidateSimple calls ValidateSimpleFunc.
func (mock *ContractMock) ValidateSimple(code []byte) error {
	if mock.ValidateSimpleFunc == nil {
		panic("ContractMock.ValidateSimpleFunc: method is nil but Contract.ValidateSimple was just called")
	}
	callInfo := struct {
		Code []byte
	}{
		Code: code,
	}
	mock.lockValidateSimple.Lock()
	mock.calls.ValidateSimple = append(mock.calls.ValidateSimple, callInfo)
	mock.lockValidateSimple.Unlock()
	return mock.ValidateSimpleFunc(code)
}

// ValidateSimpleCalls gets all the calls that were made to ValidateSimple.
// Check the length with:
//
//	len(mockedContract.ValidateSimpleCalls())
func (mock *ContractMock) ValidateSimpleCalls() []struct {
	Code []byte
} {
	var calls []struct {
		Code []byte
	}
	mock.lockValidateSimple.RLock()
	calls = mock.calls.ValidateSimple
	mock.lockValidateSimple.RUnlock()
	return calls
}
